# ワークフローの名前
name: Build and Release Application

# ワークフローが実行されるきっかけ
on:
  release:
    types: [published, prereleased] # GitHubで新しいリリースが公開されたときに実行

# 実行するジョブの定義
jobs:
  build:
    # 3種類のOSで並行してジョブを実行するための設定 (マトリックスビルド)
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    # 各ジョブが実行される仮想マシンの種類
    runs-on: ${{ matrix.os }}

    # ジョブ内のステップ
    steps:
      # 1. リポジトリのソースコードをチェックアウトする
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java (JDK 21) をセットアップする
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3. Mavenでプロジェクトをビルドし、実行可能なJARファイルを作成する
      - name: Build with Maven
        timeout-minutes: 10
        run: mvn -B package --file pom.xml

      # 4. jpackageで各OS向けのインストーラーを作成する
      - name: Package with jpackage (with debug)
        shell: bash
        run: |
          echo "--- Step 4: Starting Package with jpackage ---"
          echo "--- Debug: Listing files in the current directory ---"
          ls -R

          # ★★★ pom.xmlに合わせてJARファイル名を直接指定 ★★★
          JAR_NAME="gt-updated-1.0-SNAPSHOT.jar"
          
          echo "--- JAR_NAME is set to: ${JAR_NAME} ---"
          echo "--- Checking if the JAR file exists in target/ ---"
          if [ ! -f "target/${JAR_NAME}" ]; then
            echo "Error: Main JAR file not found at target/${JAR_NAME}"
            exit 1
          fi

          # OSごとにjpackageのコマンドと出力ファイル名を変更
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "--- Running jpackage for Windows ---"
            jpackage --type exe --input target --name "Modpack Updater" --main-jar $JAR_NAME --main-class com.example.gtupdated.HelloApplication --win-menu --win-shortcut
            ARTIFACT_PATH="Modpack Updater.exe"
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            jpackage --type dmg --input target --name "Modpack Updater" --main-jar $JAR_NAME --main-class com.example.gtupdated.HelloApplication --icon src/main/resources/icon.icns
            # ★ 修正箇所: jpackageが実際に生成するファイル名に合わせる
            ARTIFACT_PATH="Modpack Updater-1.0.dmg"
          else # ubuntu-latest
            jpackage --type deb --input target --name "Modpack Updater" --main-jar $JAR_NAME --main-class com.example.gtupdated.HelloApplication --linux-shortcut
            # ★ 修正箇所: jpackageが実際に生成するファイル名に合わせる
            ARTIFACT_PATH="modpack-updater_1.0_amd64.deb"
          fi
          
          echo "--- jpackage command finished ---"
          echo "--- Debug: Listing files again to see if artifact was created ---"
          ls -R
          
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV

      # 5. 完成したインストーラーをリリースにアップロードする
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_PATH }}
          asset_content_type: application/octet-stream
